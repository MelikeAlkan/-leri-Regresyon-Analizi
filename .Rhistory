knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("2018-mercedes-a-class-hatchback-with-night-package.jpg")
library(readr)
veri <- read.csv("C:/Users/Melike/Desktop/CarPrice_Assignment.csv",header = T)
head(veri,20)
summary(veri)
veri$car_ID  <-factor(veri$car_ID)
set.seed(2)
index<-sample(1:nrow(veri),round(nrow(veri)*0.85))
veritrain<-veri[index,]
veritest<-veri[-index,]
lmod<- lm(price~wheelbase+carlength+carwidth+carheight+curbweight+enginesize+boreratio+stroke+compressionratio+horsepower+peakrpm+citympg+highwaympg,data=veritrain)
summary(lmod)
op = par(bg = "seashell2")
plot(fitted(lmod),residuals(lmod), xlab = "fitted y" ,ylab = "residuals",col="purple",main="Artiklar-Tahmin Grafigi")
abline(h=0,col="yellow")
#Interaktif bir sekilde gorsellestirelim ;
op = par(bg = "seashell2")
library(plotly)
p <- plot_ly(veritrain, x = fitted(lmod), y = residuals(lmod), alpha = 0.3)
subplot(
add_markers(p, size = 2, name = "default"),
add_markers(p, size = 2, sizes = c(1, 205), name = "custom")
)
#install.packages("lmtest")
library(lmtest)
bptest(lmod,data=veritrain)
wmod<-lm(residuals(lmod)^2~fitted(lmod)+fitted(lmod)^2,veritrain)
summary(wmod)
library(ggplot2)
veritrain$artik <-residuals(lmod) #EKK modelinden elde edilen artiklar (residuals)
veritrain$tahmin<-predict(lmod) #EKK modelinden elde edilen tahminler (prediction)
head(veritrain)
op = par(bg = "papayawhip")
pairs(~artik+wheelbase+carlength+carwidth+carheight+curbweight+enginesize+boreratio+stroke+compressionratio+horsepower+peakrpm+citympg+highwaympg+tahmin ,data=veritrain, main="Temel Dagilim Grafigi Matrisi")
model1<-lm(abs(veritrain$artik)~compressionratio,data=veritrain)
weights1<-1/(predict(model1))^2 # agirliklar wi= 1/σ2i
veritrain<-veritrain[, -c(27,28)]
weightedleastsquaremod1<-lm(price~wheelbase+carlength+carwidth+carheight+curbweight+enginesize+boreratio+stroke+compressionratio+horsepower+peakrpm+citympg+highwaympg, data= veritrain, weights = weights1)
summary(weightedleastsquaremod1)
library(ggplot2)
op = par(bg = "lavender")
veritrain$artik<-(residuals(lmod)) #EKK modelinden elde edilen artiklar (residuals)
veritrain$tahmin<-predict(lmod) #EKK modelinden elde edilen tahminler (prediction)
head(veritrain)
pairs(artik~tahmin,data=veritrain, main="Temel Dagilim Grafigi Matrisi")
model2<-lm(abs(veritrain$artik)~veritrain$tahmin)
weights2<-1/(predict(model2))^2 # agirliklar wi= 1/σ2i
veritrain<-veritrain[, -c(27,28)]
weightedleastsquaremod2<-lm(price~wheelbase+carlength+carwidth+carheight+curbweight+enginesize+boreratio+stroke+compressionratio+horsepower+peakrpm+citympg+highwaympg, data= veritrain, weights = weights2)
summary(weightedleastsquaremod2)
library(ggplot2)
veritrain$artik<-(residuals(lmod)) #EKK modelinden elde edilen artiklar (residuals)
veritrain$tahmin<-predict(lmod) #EKK modelinden elde edilen tahminler (prediction)
head(veritrain)
kareresid<-((veritrain$artik)^2)
op = par(bg = "lightgoldenrodyellow")
pairs(kareresid~wheelbase+carlength+carwidth+carheight+curbweight+enginesize+boreratio+stroke+compressionratio+horsepower+peakrpm+citympg+highwaympg,data=veritrain, main="Temel Dagilim Grafigi Matrisi")
model3<-lm(kareresid~highwaympg,data=veritrain)
weights3<-1/(predict(model3))^2 # agirliklar wi= 1/σ2i
veritrain<-veritrain[, -c(27,28)]
weightedleastsquaremod3<-lm(price~wheelbase+carlength+carwidth+carheight+curbweight+enginesize+boreratio+stroke+compressionratio+horsepower+peakrpm+citympg+highwaympg,data=veritrain, weights = weights3)
summary(weightedleastsquaremod3)
library(ggplot2)
op = par(bg = "mintcream")
veritrain$artik<-(residuals(lmod)) #EKK modelinden elde edilen artiklar (residuals)
veritrain$tahmin<-predict(lmod) #EKK modelinden elde edilen tahminler (prediction)
head(veritrain)
pairs(kareresid~veritrain$tahmin, main="Temel Dagilim Grafigi Matrisi")
summary(lmod)
summary(weightedleastsquaremod1)
summary(weightedleastsquaremod2)
summary(weightedleastsquaremod3)
par(mfrow=c(1,2),op = par(bg = "seashell"))
plot(predict(lmod),residuals(lmod))
plot(predict(weightedleastsquaremod2),residuals(weightedleastsquaremod2))
library(dplyr)
X<-model.matrix(lmod)
y<-veritrain$price #verimizdeki yanit degiskeni
W<-diag(weights2) #kosegenlerinde agirliklar olan matris
Z<-sqrt(W)%*%X #w matrisinin karekoku ile x in carpimi
yyildiz<-sqrt(W) %*% y
Betawls<-solve(t(Z)%*%Z,t(Z)%*%yyildiz) #agirliklandirilmis ekk nin ß larini verir.
cbind(Betawls,coef(weightedleastsquaremod2))
donart<-yyildiz-Z%*%Betawls #donusturulmus model artiklari
head(cbind(donart,residuals(weightedleastsquaremod2)),15)
head(cbind(sqrt(W)%*%residuals(weightedleastsquaremod2), donart),10)
sqrt(sum(residuals(weightedleastsquaremod2)^2)/length(veritrain$price))
sqrt(sum(donart^2)/length(veritrain$price))
#install.packages("lmtest")
library(lmtest)
bpmod<-lm(donart^2~ wheelbase+carlength+carwidth+carheight+curbweight+enginesize+boreratio+stroke+compressionratio+horsepower+peakrpm+citympg+highwaympg,data=veritrain)
summary(bpmod)
knitr::include_graphics("fallinggoldprice.jpg")
library(readr)
library(dplyr)
golddata=read.csv("C:/Users/Melike/Desktop/BSE-BOM590111.csv", header=T)
GoldData <- golddata%>%select(c("Total.Turnover","Open","High","Low","Close","WAP","No..of.Shares","No..of.Trades","Deliverable.Quantity","X..Deli..Qty.to.Traded.Qty"))
head(GoldData,10)
summary(GoldData) #verimizi ozetleyelim
set.seed(2)
index<-sample(1:nrow(GoldData),round(nrow(GoldData)*0.85))
veritrain<-GoldData[index,]
veritest<-GoldData[-index,]
lmod1<- lm(Total.Turnover~Open+
High+
Low+
Close+
WAP+
No..of.Shares+
No..of.Trades+
Deliverable.Quantity+
X..Deli..Qty.to.Traded.Qty,data=veritrain)
summary(lmod1)
cor(veritrain[,-c(1)])
library(corrplot)
corrplot(cor(veritrain[,-c(1)]),method = "circle", order="hclust")
x <- model.matrix(lmod1)[,-1] #yanit degiskeni Total.Turnover i cikardik
head(x,10)
e <- eigen(t(x)%*%x)$values
e
k <- sqrt(max(e)/min(e))
k
library(car)
vif(lmod1)
lambda<- 10^seq(-15, 9, length.out = 200) #lamda icin dizi olusturma
x<-as.matrix(veritrain[,-1])
head(x,10)
library(glmnet)
op = par(bg = "snow2")
ridgemodel<-glmnet(x,veritrain$Total.Turnover,alpha = 0,lambda = lambda)
plot(ridgemodel,xvar = "lambda")
op = par(bg = "mintcream")
cv.fitridge<-cv.glmnet(x,veritrain$Total.Turnover,alpha=0,lambda = lambda) #yukarida olusturulan lambda dizisi icin
plot(cv.fitridge)
optimumlambda<-cv.fitridge$lambda.min #optimum lambda icin bunlar icerisinden min olan secilir.
optimumlambda
lambda_1SE<-cv.fitridge$lambda.1se
lambda_1SE
ridgemodel<-glmnet(x,veritrain$Total.Turnover,alpha=0,lambda=optimumlambda)
rmse<-function(true, predicted,n) {sqrt(sum((predicted - true)^2)/n)}
ypredictedridge <- predict(ridgemodel, s = optimumlambda, newx = as.matrix(veritest[,-1]))# kurulan model uzerinden elde edilen tahmin degerleri
rsquare <- function(true, predicted) {
sse <- sum((predicted - true)^2)
sst <- sum((true - mean(true))^2)
rsq <- 1 - sse / sst
rsq }
ridgerkare<-rsquare(veritest$Total.Turnover,ypredictedridge)
ridgerkare
ridgermse<-rmse(veritest$Total.Turnover,ypredictedridge,length(veritest$Total.Turnover))
ridgermse
ridgeartik<-veritest$Total.Turnover-(ypredictedridge)
head(ridgeartik,10)
ridgeaic<-nrow(GoldData)*(log(2*pi)+1+log((sum((ridgeartik)^2)/nrow(GoldData))))+((length(ridgemodel$Total.Turnover)+1)*2)
ridgeaic
ridgebic<-nrow(GoldData)*(log(2*pi)+1+log((sum((ridgeartik)^2)/nrow(GoldData))))+((length(ridgemodel$Total.Turnover)+1)*log(nrow(GoldData)))
ridgebic
op = par(bg = "lavender")
cv.fitlasso<-cv.glmnet(x,veritrain$Total.Turnover,alpha=1,lambda = lambda) #lambda dizisinde belirledigimiz lamdalar kullanilir.
plot(cv.fitlasso)
optimallambda<-cv.fitlasso$lambda.min
optimallambda
lambda_1SE<-cv.fitlasso$lambda.1se
lambda_1SE
lassomodel<-glmnet(x,veritrain$Total.Turnover,alpha=1,lambda=optimallambda)
coef(lassomodel)
ypredictedlasso <- predict(lassomodel, s = optimallambda, newx = as.matrix(veritest[,-1]))
head(ypredictedlasso,10)
lassorkare<-rsquare(veritest$Total.Turnover,ypredictedlasso)
lassorkare
lassormse<-rmse(veritest$Total.Turnover,ypredictedlasso,length(veritest$Total.Turnover))
lassormse
lassoartik<-veritest$Total.Turnover-(ypredictedlasso)
head(lassoartik,10)
lassoaic<-nrow(GoldData)*(log(2*pi)+1+log((sum((lassoartik)^2)/nrow(GoldData))))+((length(lassomodel$Total.Turnover)+1)*2)
lassoaic
lassobic<-nrow(GoldData)*(log(2*pi)+1+log((sum((lassoartik)^2)/nrow(GoldData))))+((length(lassomodel$Total.Turnover)+1)*log(nrow(GoldData)))
lassobic
op = par(bg = "lemonchiffon")
cv.fitelasticnet<-cv.glmnet(x,veritrain$Total.Turnover,alpha=0.5,lambda = lambda)
plot(cv.fitelasticnet)
optlambda<-cv.fitelasticnet$lambda.min
optlambda
lambda_1SE<-cv.fitelasticnet$lambda.1se
lambda_1SE
elasticmodel<-glmnet(x,veritrain$Total.Turnover,alpha=0.5,lambda=optlambda)
coef(elasticmodel)
ypredictedelasticnet <- predict(elasticmodel, s = optlambda, newx = as.matrix(veritest[,-1]))
head(ypredictedelasticnet,10)
elasticrkare<-rsquare(veritest$Total.Turnover,ypredictedelasticnet)
elasticrkare
elasticrmse<-rmse(veritest$Total.Turnover,ypredictedelasticnet,length(veritest$Total.Turnover))
elasticrmse
elasticartik<-veritest$Total.Turnover-(ypredictedelasticnet)
head(elasticartik,10)
elasticaic<-nrow(GoldData)*(log(2*pi)+1+log((sum((elasticartik)^2)/nrow(GoldData))))+((length(elasticmodel$Total.Turnover)+1)*2)
elasticaic
elasticbic<-nrow(GoldData)*(log(2*pi)+1+log((sum((elasticartik)^2)/nrow(GoldData))))+((length(elasticmodel$Total.Turnover)+1)*log(nrow(GoldData)))
elasticbic
tablo<-matrix(c(ridgeaic,ridgebic,ridgermse,ridgerkare,
lassoaic,lassobic,lassormse,lassorkare,
elasticaic,elasticbic,elasticrmse,elasticrkare),3,4,byrow = TRUE)
row.names(tablo)<-c("Ridge","Lasso","Elasticnet")
colnames(tablo)<-c("AIC","BIC","RMSE","Rkare")
tablo
set.seed(2)
index<-sample(1:nrow(GoldData),round(nrow(GoldData)*0.85))
veritrain<-GoldData[index,]
veritest<-GoldData[-index,]
lmod1 <- lm(Total.Turnover~Open+
High+
Low+
Close+
WAP+
No..of.Shares+
No..of.Trades+
Deliverable.Quantity+
X..Deli..Qty.to.Traded.Qty,data=veritrain)
summary(lmod1)
rmse <- function(x,y) sqrt(mean((x-y)^2))
rmse(predict(lmod1), veritrain$Total.Turnover)
rmse(predict(lmod1, veritest), veritest$Total.Turnover)
par(mfrow=c(1,3),op = par(bg = "ivory1"))
plot(High~Open, veritrain)
plot(Low~High, veritrain)
plot(WAP~Close, veritrain)
library(pls)
pcrmodel <- pcr(Total.Turnover~Open+
High+
Low+
Close+
WAP+
No..of.Shares+
No..of.Trades+
Deliverable.Quantity+
X..Deli..Qty.to.Traded.Qty,data=veritrain,scale=T)
summary(pcrmodel)
op = par(bg = "seashell")
validationplot(pcrmodel,val.type = "RMSE",col="green")
pcrmse <- RMSEP(pcrmodel)
pcrmse
op = par(bg = "thistle1")
validationplot(pcrmodel,val.type = "R2",col="orangered3")
pcrmse <- RMSEP(pcrmodel,newdata=veritest)
pcrmse
coef(pcrmodel,ncomp=5)
rmse(predict(pcrmodel, ncomp=5), veritrain$Total.Turnover)
rmse(predict(pcrmodel, veritest, ncomp=5), veritest$Total.Turnover)
set.seed(2)
pcrmodel1 <- pcr(Total.Turnover~Open+
High+
Low+
Close+
WAP+
No..of.Shares+
No..of.Trades+
Deliverable.Quantity+
X..Deli..Qty.to.Traded.Qty,data=veritrain,scale=T,validation="CV")
pcrCV <- RMSEP(pcrmodel1, estimate="CV")
pcrCV
op = par(bg = "snow")
plot(pcrCV,main="",col="red")
which.min(pcrCV$val)
coef(pcrmodel1,ncomp=5)
model1 <- lm(Total.Turnover~Open+
High+
Low+
Close+
WAP+
No..of.Shares+
No..of.Trades+
Deliverable.Quantity+
X..Deli..Qty.to.Traded.Qty,data=golddata)
summary(model1)
fit<- fitted(model1)
head(fit,10) #tahmin degerleri
resid <-residuals(model1)
head(resid,10) #artiklar
library(olsrr)
ols_test_normality(model1)
op = par(bg = "mintcream")
x <-residuals(model1)
#Artiklarin histogrami;
histogram <-hist(x, breaks=10, density=10,col="darkgrey",xlab="Residuals", main="Histogram")
abline(v=mean(x), col="darkgreen", lwd=2)
#Yogunluk egrisi cizme;
multiplier <- histogram$counts / histogram$density
mydensity <- density(x)
mydensity$y <- mydensity$y * multiplier[1]
lines(mydensity,col="blue", lwd=2)
#Normal egrisisin ayni ortalama ve standart sapma ile cizilmesi;
xfit <- seq (min(x), max(x), length=40)
yfit <- dnorm(xfit, mean =mean(x), sd = sd(x))
yfit <- yfit *diff(histogram$mids[1:2]) *length(x)
lines(xfit, yfit, col="red", lwd=2)
#QQ-plot;
op = par(bg = "mistyrose")
qqnorm(residuals(model1),ylab="residuals",main="Q-Q PLOT",col="green")
qqline(residuals(model1),col="pink")
#Density;
library(plotly)
p <- ggplot(golddata, aes(x)) +
geom_histogram(aes(y = ..density..), alpha = 0.7,bins = 60, fill = "#FF00FF") +
geom_density(fill = "#FFFF66", alpha = 0.5) +
theme(panel.background = element_rect(fill = '#99FFFF')) +
ggtitle("Density with Histogram overlay")
fig <- ggplotly(p)
fig
library(ggplot2)
ggplot(data=golddata,mapping=aes(x=fit,y=resid))+
geom_jitter(color="purple")+
geom_hline(yintercept=0,color="orange")+ggtitle("RESID & FITTED ")+xlab(" FITTED ")+ylab("RESID")
#Interaktif bir sekilde gorsellestirelim ;
p <- plot_ly(veritrain, x = fit, y = resid, alpha = 0.3)
subplot(
add_markers(p, size = 2, name = "default"),
add_markers(p, size = 2, sizes = c(1, 205), name = "custom"))
#install.packages("lmtest")
library(lmtest)
bptest(model1,data=golddata)
library(car)
library(lmtest)
dwtest(Total.Turnover~Open+
High+
Low+
Close+
WAP+
No..of.Shares+
No..of.Trades+
Deliverable.Quantity+
X..Deli..Qty.to.Traded.Qty ,data=golddata)
library(faraway)
op = par(bg = "mintcream")
plot(model1)
golddata[c(1413,1419,1423,1454,1458,1461), ]
stud <- rstudent(model1)
head(stud,10)
stud[which.max(abs(stud))]
qt(0.05/(length(stud)*2) , (length(golddata$Total.Turnover)-10-1)) #(alfa/2n),(n-p-1)
library(car)
outlierTest(model1)
library(MASS)
hubermod <- rlm(Total.Turnover~Open+
High+
Low+
Close+
WAP+
No..of.Shares+
No..of.Trades+
Deliverable.Quantity+
X..Deli..Qty.to.Traded.Qty ,data=golddata)
summary(hubermod)
cbind(coef(model1),coef(hubermod))
op = par(bg = "lavender")
halfnorm(residuals(hubermod),4,ylab = "hubermod residuals")
stud <- rstudent(hubermod) #robust regresyonunun standart artiklari
stud[which.max(abs(stud))]
#alfa 0.05
qt(.05/(length(stud)*2),length(golddata$Total.Turnover)-10-1) #p=bagimsiz degisken sayisi+1
outlierTest(hubermod)
bisquaremod <- rlm(Total.Turnover~Open+
High+
Low+
Close+
WAP+
No..of.Shares+
No..of.Trades+
Deliverable.Quantity+
X..Deli..Qty.to.Traded.Qty ,data=golddata,psi=psi.bisquare)
summary(bisquaremod)
library(corrplot)
corrplot(cor(veritrain[,-c(1)]),method = "circle", order="hclust")
library(corrplot)
corrplot(cor(veritrain[,-c(1)]),method = "circle", order="hclust")
library(corrplot)
corrplot(cor(veritrain[,-c(1)]),method = "circle", order="hclust")
library(corrplot)
corrplot(cor(veritrain[,-c(1)]),method = "circle", order="hclust")
library(shiny); runApp('MELIKEFATMAALKANapp.R')
